# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241AB`R5W:1uDFN];Ik@t"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false


actor {
  threadCount = 2
}


//url.login="http://api.hostip.info/country.php"
url.login = "https://www.iwatch.org.uk/frmLogin.aspx"
jenkins {
  url = "http://longscm01n:9090/"
}

loadtesting {
  //  legacy = "http://requestb.in/rsfigsrs"
  //  nova = "http://requestb.in/1e9zxdf1"
  //    legacy = "http://httpbin.org/post"
  //  nova = "http://httpbin.org/post"
  legacy = "https://origin-rbs.gta-travel.com/rbsusapi/RequestListenerServlet"
  nova = "https://nova.gta-travel.com/rbsusapi/RequestListenerServlet"
  inputFile = "/resources/inputPayload-1.csv"
}

play {
  http {
    filters = "util.MyFilters"
    requestHandler = "util.SimpleHttpRequestHandler"
  }
  ws {
    compressionEnabled = false
  }
  akka {
//    loglevel = DEBUG
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-factor = 2.0
          parallelism-min = 100
          parallelism-max = 300
        }
      }
    }
  }
  modules {
    # Reactive Mongo
    enabled += "play.modules.reactivemongo.ReactiveMongoModule"
    enabled += "play.filters.gzip.GzipFilterModule"
  }
  filters {
    # GZip filter configuration
    gzip {

      # The buffer size to use for gzipped bytes
      bufferSize = 8k

      # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
      # to chunked encoding.
      chunkedThreshold = 100k

    }
  }
}

mongodb.uri = "mongodb://localhost:27017/mydb"


//mongo-async-driver {
//  akka {
//    loglevel = WARNING
//  }
//}

//logger {
//  root = ERROR
//  play = DEBUG
//  application = DEBUG
//}
# Swagger API

//play.modules.enabled += "play.modules.swagger.SwaggerModule"

jenkins {
  url = "http://longscm01n:9090"
  jobs = ["HTML_Pricing_SIT", "HTML_Itinerary_SIT", "HTML_Transfers_SIT", "Finance_SIT_PackageTest"]
//  jobs = ["HTML_Pricing_SIT", "HTML_Itinerary_SIT", "Expedia_Integration_SIT", "Nova_Comparison_Booking", "Nova_Comparison_Search"]
}